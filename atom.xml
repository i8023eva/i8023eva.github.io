<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>i8023_</title>
  <icon>https://www.gravatar.com/avatar/9465fef69c3a71eb915de2eb6009f32e</icon>
  <subtitle>alt+shift+k = </subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-10T14:01:04.187Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>L</name>
    <email>i8023eva@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>原码反码补码</title>
    <link href="http://yoursite.com/2016/12/29/2019-5-10-%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81/"/>
    <id>http://yoursite.com/2016/12/29/2019-5-10-原码反码补码/</id>
    <published>2016-12-29T09:31:57.000Z</published>
    <updated>2019-05-10T14:01:04.187Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>正数<sup>原</sup> = 正数<sup>反</sup> = 正数<sup>补</sup><br>负数<sup>反</sup> = 负数<sup>原</sup>　符号位不变,其余按位取反<br>负数<sup>补</sup> = 负数<sup>反</sup>+1  </p></blockquote><h1 id="1-原码"><a href="#1-原码" class="headerlink" title="1. 原码"></a>1. 原码</h1><p>0按8位来看<br>[+0]<sup>原</sup> = 0　0000000<br>[-0]<sup>原</sup> = 1　0000000<br>0的原码表示不唯一</p><h1 id="2-反码"><a href="#2-反码" class="headerlink" title="2. 反码"></a>2. 反码</h1><p>[+0]<sup>反</sup> = 0　0000000<br>[-0]<sup>反</sup> = 1　1111111<br>0的反码表示也是不唯一的</p><h1 id="3-补码"><a href="#3-补码" class="headerlink" title="3. 补码"></a>3. 补码</h1><p>[+0]<sup>补</sup> = 0　0000000<br>[-0]<sup>补</sup> = [-0]<sup>反</sup> + 1 = 1,0000,0000<br>对于8位字长,进位的1溢出,我们只能看到8个0,这就和+0是一样的.  </p><blockquote><p>补码解决了0的表示不唯一的问题.</p></blockquote><h2 id="3-1-补码的算术运算"><a href="#3-1-补码的算术运算" class="headerlink" title="3.1 补码的算术运算"></a>3.1 补码的算术运算</h2><blockquote><p>通过引进补码,可将减法运算转换为加法运算.</p></blockquote><p>[X+Y]<sup>补</sup> = [X]<sup>补</sup> + [Y]<sup>补</sup><br>[X-Y]<sup>补</sup> = [X+(-Y)]<sup>补</sup> = [X]<sup>补</sup> + [-Y]<sup>补</sup></p><p><em>例1</em>　66 - 51 = 66 + (-51) = 15</p><p>用二进制补码运算 :<br>[+66]<sup>补</sup> = [+66]<sup>原</sup> = 01000010<br>[-51]<sup>原</sup> = 1　0110011<br>[-51]<sup>补</sup> = 1　1001101<br>[+66]<sup>补</sup> + [-51]<sup>补</sup> = 1,0000,1111<br>=15  </p><p><em>例2</em>　X = -52 = -0110100, Y = 116 = +1110100, 求 X + Y = ?</p><p>[X]<sup>原</sup> = 10110100<br>[X]<sup>补</sup> = 11001100<br>[Y]<sup>补</sup> = 01110100<br>[X + Y]<sup>补</sup> = 01000000<br>X + Y = +1000000</p><h3 id="3-1-1-溢出问题"><a href="#3-1-1-溢出问题" class="headerlink" title="3.1.1 溢出问题"></a>3.1.1 溢出问题</h3><blockquote><p>除法运算溢出时,产生<code>除数为0</code>中断<br>乘法运算无溢出问题</p></blockquote><p><em>例3</em> 若 : X = 0111 1000, Y = 0110 1001　则 : X + Y = 1110 0001</p><p>如果是有符号数,次高位向最高位有进位, 而最高位向前无进位,产生溢出(两个正数相加变成负数).<br>如果是无符号数,就不算溢出,因为最高位向更高位没有进位.</p><h2 id="3-2-补码的说明"><a href="#3-2-补码的说明" class="headerlink" title="3.2 补码的说明"></a>3.2 补码的说明</h2><blockquote><p>正数不变,负数即用模减去绝对值.</p></blockquote><h3 id="3-2-1-特殊数-10000000"><a href="#3-2-1-特殊数-10000000" class="headerlink" title="3.2.1 特殊数 10000000"></a>3.2.1 特殊数 10000000</h3><p>对无符号数 :<br>(10000000)_B = 128<br>在原码中定义为 :<br>(10000000)_B = -0<br>在反码中定义为 :<br>(10000000)_B = -127<br>在补码中定义为 :<br>(10000000)_B = -128</p><h3 id="3-2-2-关于模"><a href="#3-2-2-关于模" class="headerlink" title="3.2.2 关于模"></a>3.2.2 关于模</h3><p>说一个钟表的例子:<br>　将指针从5点拨到1点;<br>　两种拨法:<br>　　逆时针: 5 - 4 = 1;<br>　　顺时针: 5 + 8 = 12 + 1 = 1;<br>　这是模12:<br>　　5 - 4 = 5 + 8 → 8为4的补数<br>　　[-4]<sup>补</sup> = 12 - 4 = 8</p><blockquote><p>二进制下，有多少位数参加运算,模就是在 1 的后面加上多少个 0.</p></blockquote><h3 id="3-2-3-128的补码"><a href="#3-2-3-128的补码" class="headerlink" title="3.2.3 -128的补码"></a>3.2.3 -128的补码</h3><table><thead><tr><th style="text-align:center">有符号</th><th style="text-align:center">无符号</th><th style="text-align:center">二进制补码</th></tr></thead><tbody><tr><td style="text-align:center"> 0</td><td style="text-align:center">0</td><td style="text-align:center">0000 0000</td></tr><tr><td style="text-align:center"> 1</td><td style="text-align:center">1</td><td style="text-align:center">0000 0001</td></tr><tr><td style="text-align:center"> …</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center"> 127</td><td style="text-align:center">127</td><td style="text-align:center">0111 1111</td></tr></tbody></table><p>有符号的从这里开始变化  </p><table><thead><tr><th style="text-align:center">-128</th><th style="text-align:center">128</th><th style="text-align:center">1000 0000</th></tr></thead><tbody><tr><td style="text-align:center"> -127</td><td style="text-align:center">129</td><td style="text-align:center">1000 0001</td></tr><tr><td style="text-align:center"> …</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center"> -1</td><td style="text-align:center">255</td><td style="text-align:center">1111 1111</td></tr><tr><td style="text-align:center"> 0</td><td style="text-align:center">0</td><td style="text-align:center">0000 0000</td></tr></tbody></table><p>补码没有+0/-0之分,所以这个特殊的数就用-128来表示.<br>就像钟表例子一样,这就是一个环,超出之后其实又从0开始计算超出的部分.</p><p>用模来算的话 :<br>八位二进制的模 : 1 0000 0000;<br>-128的绝对值 : 1 000 0000<br>-128的补码 : 10000 0000 - 1000 0000 = 1000 0000  </p><p>负数的补码等于反码加一<br>=&gt; 1 0000 0000 - 1000 0000<br>=&gt; (1111 1111 - 0000 0001) - 1000 0000<br>=&gt; 1111 1111 - 1000 0000 + 1<br>=&gt; 0111 1111 + 1  </p><h2 id="3-3-补码转换为十进制"><a href="#3-3-补码转换为十进制" class="headerlink" title="3.3 补码转换为十进制"></a>3.3 补码转换为十进制</h2><p>负数 =&gt; 对补码再取补  </p><p>[X]<sup>补 = 1101 0010<br>X = [[X]<sup>补</sup>]<sup>补</sup> = [1101 0010]<sup>补</sup> = 1010 1110 = -46  </sup></p><hr><p>B , Binary (二进制);<br>H , Hex (十六进制);<br>O , Octal (八进制);<br>D , Decimal (十进制).  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;正数&lt;sup&gt;原&lt;/sup&gt; = 正数&lt;sup&gt;反&lt;/sup&gt; = 正数&lt;sup&gt;补&lt;/sup&gt;&lt;br&gt;负数&lt;sup&gt;反&lt;/sup&gt; = 负数&lt;sup&gt;原&lt;/sup&gt;　符号位不变,其余按位取反&lt;br&gt;负数&lt;sup&gt;补&lt;/sup&gt; = 负数&lt;sup&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
